type Block @entity {
    "BlockHeight-blockHash - e.g. 0001812319-0001c"
    id: ID!
    height: Int! @index
    hash: Bytes! @index
    parentHash: Bytes!
    stateRoot: Bytes!
    extrinsicsicRoot: Bytes!
    specName: String!
    specVersion: Int! @index
    implName: String!
    implVersion: Int!
    timestamp: DateTime! @index
    validator: Bytes @index

    extrinsicsCount: Int!
    callsCount: Int!
    eventsCount: Int!

    extrinsics: [Extrinsic]! @derivedFrom(field: "block") @cardinality(value: 1000)
    calls: [Call]! @derivedFrom(field: "block") @cardinality(value: 1000)
    events: [Event]! @derivedFrom(field: "block") @cardinality(value: 1000)
}

type ExtrinsicSignature {
    address: JSON
    signature: JSON
    signedExtensions: JSON
}

type Extrinsic @entity {
    id: ID!

    block: Block!
    call: Call!

    index: Int!
    version: Int!
    signature: ExtrinsicSignature
    tip: BigInt
    fee: BigInt
    success: Boolean @index
    error: JSON
    hash: Bytes! @index

    calls: [Call]! @derivedFrom(field: "extrinsic")
    events: [Event]! @derivedFrom(field: "extrinsic")
}

type Call @entity @index(fields: ["id", "pallet", "name"]) {
    id: ID!

    block: Block!
    extrinsic: Extrinsic
    parent: Call

    address: [Int!]!
    success: Boolean! @index
    error: JSON

    pallet: String! @index
    name: String! @index

    args: JSON
    argsStr: [String]

    subcalls: [Call]! @derivedFrom(field: "parent")
    events: [Event]! @derivedFrom(field: "call")
}

type Event @entity @index(fields: ["id", "pallet", "name"]) {
    "Event id - e.g. 0000000001-000000-272d6"
    id: ID!

    block: Block!
    extrinsic: Extrinsic
    call: Call

    index: Int!
    phase: String!

    pallet: String! @index
    name: String! @index

    args: JSON
    argsStr: [String]
}

enum CounterLevel {
    Global
    Pallet
    Item
}

enum ItemType {
    Extrinsics
    Calls
    Events
}

type ItemsCounter @entity {
    id: ID!
    type: ItemType! @index
    level: CounterLevel! @index
    total: Int! @index
}
